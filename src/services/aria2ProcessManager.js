"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Aria2ProcessManager = void 0;
exports.getAria2ProcessManager = getAria2ProcessManager;
const child_process_1 = require("child_process");
const path_1 = require("path");
const fs_1 = require("fs");
const electron_1 = require("electron");
const resourceManager_1 = require("../utils/resourceManager");
class Aria2ProcessManager {
    constructor(config = {}) {
        this.process = null;
        this.isStarting = false;
        this.retryCount = 0;
        this.maxRetries = 3;
        this.restartTimer = null;
        this.resourceManager = resourceManager_1.ResourceManager.getInstance();
        this.config = this.normalizeConfig(config);
    }
    normalizeConfig(config) {
        // 初始化资源管理器
        const resources = this.resourceManager.initializeResources();
        return {
            executablePath: config.executablePath || resources.executablePath,
            configPath: config.configPath || resources.configPath,
            port: config.port || 6800,
            secret: config.secret || this.generateSecret(),
            downloadDir: config.downloadDir || (0, path_1.join)(electron_1.app.getPath('downloads'), 'Aria2Downloads'),
            logLevel: config.logLevel || 'notice',
            enableRpc: config.enableRpc ?? true,
            rpcAllowOriginAll: config.rpcAllowOriginAll ?? true,
            autoStart: config.autoStart ?? true
        };
    }
    generateSecret() {
        return Math.random().toString(36).substring(2) + Math.random().toString(36).substring(2);
    }
    generateConfigFile() {
        const downloadDir = this.config.downloadDir;
        // 确保下载目录存在
        if (!(0, fs_1.existsSync)(downloadDir)) {
            (0, fs_1.mkdirSync)(downloadDir, { recursive: true });
        }
        // 获取会话文件路径
        const sessionPath = this.resourceManager.getSessionFilePath();
        const configContent = `# Aria2 Desktop 自动生成的配置文件
# Generated by Aria2 Desktop

# 基本设置
dir=${downloadDir.replace(/\\/g, '/')}
max-concurrent-downloads=5
max-connection-per-server=5
min-split-size=10M
split=5
continue=true

# 连接设置
connect-timeout=60
timeout=60
max-tries=5
retry-wait=3

# RPC 设置
enable-rpc=true
rpc-listen-all=false
rpc-listen-port=${this.config.port}
rpc-secret=${this.config.secret}
rpc-allow-origin-all=${this.config.rpcAllowOriginAll}

# 性能设置
disk-cache=32M
file-allocation=prealloc
max-overall-download-limit=0
max-overall-upload-limit=0

# 日志设置
log-level=${this.config.logLevel}
console-log-level=${this.config.logLevel}

# 会话设置
save-session=${sessionPath.replace(/\\/g, '/')}
save-session-interval=60

# 其他设置
auto-file-renaming=true
allow-overwrite=false
check-certificate=true
`;
        try {
            (0, fs_1.writeFileSync)(this.config.configPath, configContent, 'utf-8');
            console.log('Aria2 配置文件已生成:', this.config.configPath);
        }
        catch (error) {
            console.error('生成 Aria2 配置文件失败:', error);
            throw new Error(`无法生成 Aria2 配置文件: ${error}`);
        }
    }
    async start() {
        if (this.process && !this.process.killed) {
            console.log('Aria2 进程已经在运行');
            return true;
        }
        if (this.isStarting) {
            console.log('Aria2 进程正在启动中');
            return false;
        }
        this.isStarting = true;
        try {
            // 检查可执行文件是否存在
            if (!(0, fs_1.existsSync)(this.config.executablePath)) {
                throw new Error(`Aria2 可执行文件不存在: ${this.config.executablePath}`);
            }
            // 生成配置文件
            this.generateConfigFile();
            // 启动 Aria2 进程
            const args = [
                `--conf-path=${this.config.configPath}`,
                '--daemon=false', // 不以守护进程方式运行，便于管理
                '--enable-rpc=true',
                `--rpc-listen-port=${this.config.port}`,
                `--rpc-secret=${this.config.secret}`
            ];
            console.log('启动 Aria2:', this.config.executablePath, args.join(' '));
            this.process = (0, child_process_1.spawn)(this.config.executablePath, args, {
                stdio: ['ignore', 'pipe', 'pipe'],
                detached: false,
                windowsHide: true
            });
            this.setupProcessHandlers();
            // 等待进程启动
            await new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    reject(new Error('Aria2 启动超时'));
                }, 10000);
                const onData = (data) => {
                    const output = data.toString();
                    console.log('Aria2 输出:', output);
                    // 检查是否包含启动成功的标志
                    if (output.includes('listening on TCP port') ||
                        output.includes('RPC server listening') ||
                        output.includes('IPv4 RPC: listening')) {
                        clearTimeout(timeout);
                        this.process?.stdout?.off('data', onData);
                        this.process?.stderr?.off('data', onData);
                        resolve();
                    }
                };
                this.process?.stdout?.on('data', onData);
                this.process?.stderr?.on('data', onData);
                this.process?.on('error', (error) => {
                    clearTimeout(timeout);
                    reject(error);
                });
                this.process?.on('exit', (code) => {
                    clearTimeout(timeout);
                    if (code !== 0 && code !== null) {
                        reject(new Error(`Aria2 进程异常退出，代码: ${code}`));
                    }
                });
            });
            console.log('Aria2 进程启动成功, PID:', this.process?.pid);
            this.retryCount = 0;
            return true;
        }
        catch (error) {
            console.error('启动 Aria2 失败:', error);
            this.process = null;
            return false;
        }
        finally {
            this.isStarting = false;
        }
    }
    setupProcessHandlers() {
        if (!this.process)
            return;
        this.process.stdout?.on('data', (data) => {
            console.log('[Aria2 stdout]:', data.toString().trim());
        });
        this.process.stderr?.on('data', (data) => {
            console.error('[Aria2 stderr]:', data.toString().trim());
        });
        this.process.on('error', (error) => {
            console.error('Aria2 进程错误:', error);
            this.handleProcessExit(null, 'error');
        });
        this.process.on('exit', (code, signal) => {
            console.log(`Aria2 进程退出: code=${code}, signal=${signal}`);
            this.handleProcessExit(code, signal);
        });
    }
    handleProcessExit(code, signal) {
        this.process = null;
        // 如果是正常退出或者手动停止，不重启
        if (code === 0 || signal === 'SIGTERM' || signal === 'SIGKILL') {
            console.log('Aria2 进程正常退出');
            return;
        }
        // 如果启用了自动重启且重试次数未超限
        if (this.config.autoStart && this.retryCount < this.maxRetries) {
            this.retryCount++;
            console.log(`Aria2 进程异常退出，${3}秒后尝试第${this.retryCount}次重启`);
            this.restartTimer = setTimeout(() => {
                this.start().catch(error => {
                    console.error(`第${this.retryCount}次重启失败:`, error);
                });
            }, 3000);
        }
        else {
            console.error('Aria2 进程重启次数超限，停止自动重启');
        }
    }
    async stop() {
        if (this.restartTimer) {
            clearTimeout(this.restartTimer);
            this.restartTimer = null;
        }
        if (!this.process || this.process.killed) {
            console.log('Aria2 进程未运行');
            return true;
        }
        try {
            console.log('正在停止 Aria2 进程...');
            // 优雅关闭
            this.process.kill('SIGTERM');
            // 等待进程退出
            await new Promise((resolve) => {
                const timeout = setTimeout(() => {
                    // 强制终止
                    if (this.process && !this.process.killed) {
                        console.log('强制终止 Aria2 进程');
                        this.process.kill('SIGKILL');
                    }
                    resolve();
                }, 5000);
                this.process?.on('exit', () => {
                    clearTimeout(timeout);
                    resolve();
                });
            });
            this.process = null;
            console.log('Aria2 进程已停止');
            return true;
        }
        catch (error) {
            console.error('停止 Aria2 进程失败:', error);
            return false;
        }
    }
    isRunning() {
        return this.process !== null && !this.process.killed;
    }
    getConfig() {
        return { ...this.config };
    }
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
    }
    async restart() {
        console.log('重启 Aria2 进程...');
        await this.stop();
        await new Promise(resolve => setTimeout(resolve, 1000)); // 等待1秒
        return this.start();
    }
    getProcessInfo() {
        return {
            isRunning: this.isRunning(),
            pid: this.process?.pid,
            retryCount: this.retryCount,
            config: this.config,
            isAria2Available: this.resourceManager.isAria2Available(),
            resourceInfo: this.resourceManager.getResourceInfo()
        };
    }
    isAria2Available() {
        return this.resourceManager.isAria2Available();
    }
}
exports.Aria2ProcessManager = Aria2ProcessManager;
// 单例模式
let aria2Manager = null;
function getAria2ProcessManager(config) {
    if (!aria2Manager) {
        aria2Manager = new Aria2ProcessManager(config);
    }
    return aria2Manager;
}
